<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xu.dao.GoodsMapper">
	<resultMap id="BaseResultMap" type="com.xu.model.Goods">
		<id column="goods_id" property="goodsId" jdbcType="INTEGER" />
		<result column="shop_id" property="shopId" jdbcType="INTEGER" />
		<result column="goods_name" property="goodsName"
			jdbcType="VARCHAR" />
		<result column="goods_price" property="goodsPrice"
			jdbcType="FLOAT" />
		<result column="goods_stock" property="goodsStock"
			jdbcType="VARCHAR" />
		<result column="goods_address" property="goodsAddress"
			jdbcType="VARCHAR" />
		<result column="goods_description" property="goodsDescription"
			jdbcType="VARCHAR" />
		<result column="goods_image_url" property="goodsImageUrl"
			jdbcType="VARCHAR" />
		<result column="goods_status" property="goodsStatus"
			jdbcType="INTEGER" />
	</resultMap>
	<sql id="Base_Column_List">
		goods_id, shop_id, goods_name, goods_price, goods_stock,
		goods_address,
		goods_description,
		goods_image_url,goods_status
	</sql>
	<!-- 查询所有商品 -->
	<select id="getAllGoods" resultMap="BaseResultMap">
		select * from goods
	</select>

	<!-- 根据商品名模糊查询商品 -->
	<select id="getAllGoodsByKeywords" resultMap="BaseResultMap">
		select * from goods
		where goods_name LIKE concat(concat('%',#{goodsName}),'%')
	</select>
	<!-- 根据店铺ID查询商品 -->
	<select id="getAllGoodsByShopId" resultMap="BaseResultMap">
		select * from goods
		where shop_id = #{shopId,jdbcType=INTEGER}
	</select>
	<!-- 根据店铺名称关键字模糊查询商品 -->
	<select id="getAllGoodsByShopName" resultMap="BaseResultMap">
		select * from goods
		where shop_id IN(
		select shop_id from shop where shop_name LIKE
		concat(concat('%',#{shopName}),'%')
		)
	</select>
	<!-- 根据id查询商品 -->
	<select id="findGoodById" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select * from goods where goods_id =
		#{goodsId,jdbcType=INTEGER}
	</select>
	<!-- 更新库存 -->
	<update id="updateGoodsStock" parameterType="com.xu.model.Goods">
		update goods
		set
		goods_stock = #{goodsStock,jdbcType=INTEGER} where
		goods_id=#{goodsId,jdbcType=INTEGER}
	</update>
	<!-- 更改商品状态：下架或重新上架 -->
	<update id="updateGoodsStatusById"
		parameterType="com.xu.model.Goods">
		update goods
		set goods_status =
		#{goodsStatus,jdbcType=INTEGER} where
		goods_id=#{goodsId,jdbcType=INTEGER}
	</update>
	<!-- 上架商品 -->
	<insert id="putOnGoods" parameterType="com.xu.model.Goods">
		insert into goods
		(shop_id,goods_name,goods_price,
		goods_stock,
		goods_address,goods_description,goods_image_url)
		values
		(#{shopId,jdbcType=INTEGER},#{goodsName,jdbcType=VARCHAR},
		#{goodsPrice,jdbcType=FLOAT},
		#{goodsStock,jdbcType=INTEGER},#{goodsAddress,jdbcType=VARCHAR},#{goodsDescription,jdbcType=VARCHAR},#{goodsImageUrl,jdbcType=VARCHAR})
	</insert>
	<!-- 修改商品信息 -->
	<update id="updateGoods" parameterType="com.xu.model.Goods">
		update goods
		set
		goods_name
		= #{goodsName,jdbcType=INTEGER},
		goods_price =
		#{goodsPrice,jdbcType=FLOAT},
		goods_stock =
		#{goodsStock,jdbcType=INTEGER},
		goods_address =
		#{goodsAddress,jdbcType=VARCHAR},
		goods_description =
		#{goodsDescription,jdbcType=VARCHAR},
		goods_image_url =
		#{goodsImageUrl,jdbcType=VARCHAR}
		where goods_id =
		#{goodsId,jdbcType=INTEGER}
	</update>
</mapper>